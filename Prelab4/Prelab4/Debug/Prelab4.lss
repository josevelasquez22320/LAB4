
Prelab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000186  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000112  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000186  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000186  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006c8  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000646  00000000  00000000  000008f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000265  00000000  00000000  00000f36  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  0000119c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000357  00000000  00000000  000011f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  00001547  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001583  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__vector_3>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  88:	0c 94 87 00 	jmp	0x10e	; 0x10e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initADC>:
		PORTD = counter;
	}
}

void initADC(void){
	PCICR |= (1 << PCIE0);
  90:	e8 e6       	ldi	r30, 0x68	; 104
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	81 60       	ori	r24, 0x01	; 1
  98:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT0) | (1 << PCINT1);
  9a:	eb e6       	ldi	r30, 0x6B	; 107
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	83 60       	ori	r24, 0x03	; 3
  a2:	80 83       	st	Z, r24
  a4:	08 95       	ret

000000a6 <main>:
//INICIO VA.
void initADC(void);

int main(void)
{
	cli();
  a6:	f8 94       	cli
	DDRC |= (1 << PINC1) | (1 << PINC2) | (1 << PINC3); //TRANSISTORES
  a8:	87 b1       	in	r24, 0x07	; 7
  aa:	8e 60       	ori	r24, 0x0E	; 14
  ac:	87 b9       	out	0x07, r24	; 7
	PORTC = 0;
  ae:	18 b8       	out	0x08, r1	; 8
	PORTC |= (1 << PORTC1);
  b0:	88 b1       	in	r24, 0x08	; 8
  b2:	82 60       	ori	r24, 0x02	; 2
  b4:	88 b9       	out	0x08, r24	; 8
	
	//LIEMPIAR PUERTOD
	DDRD = 0xFF;
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0;
  ba:	1b b8       	out	0x0b, r1	; 11
	UCSR0B = 0;
  bc:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	//ASIGNACIONES
	PORTB |= (1 << PINB0) | (1 << PINB1); //SALIDAS
  c0:	85 b1       	in	r24, 0x05	; 5
  c2:	83 60       	ori	r24, 0x03	; 3
  c4:	85 b9       	out	0x05, r24	; 5
	DDRB &= ~(1 << PINB0) | ~(1 << PINB1); //ENTRADAS
  c6:	84 b1       	in	r24, 0x04	; 4
  c8:	84 b9       	out	0x04, r24	; 4
	
	
	
	initADC();
  ca:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
	sei();
  ce:	78 94       	sei

	//loop
	while (1)
	{
		PORTD = counter;
  d0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  d4:	8b b9       	out	0x0b, r24	; 11
  d6:	fc cf       	rjmp	.-8      	; 0xd0 <main+0x2a>

000000d8 <__vector_3>:
	PCICR |= (1 << PCIE0);
	PCMSK0 |= (1 << PCINT0) | (1 << PCINT1);
}

//operation decrementa incrementa
ISR (PCINT0_vect){
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
  e2:	8f 93       	push	r24
	if (!(PINB & (1 << PINB0))) {
  e4:	18 99       	sbic	0x03, 0	; 3
  e6:	06 c0       	rjmp	.+12     	; 0xf4 <__vector_3+0x1c>
		counter++;
  e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ec:	8f 5f       	subi	r24, 0xFF	; 255
  ee:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  f2:	07 c0       	rjmp	.+14     	; 0x102 <__vector_3+0x2a>
		}else if (!(PINB & (1 << PINB1))) {
  f4:	19 99       	sbic	0x03, 1	; 3
  f6:	05 c0       	rjmp	.+10     	; 0x102 <__vector_3+0x2a>
		counter--;
  f8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  fc:	81 50       	subi	r24, 0x01	; 1
  fe:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}else{
		counter = counter;
	}
}
 102:	8f 91       	pop	r24
 104:	0f 90       	pop	r0
 106:	0f be       	out	0x3f, r0	; 63
 108:	0f 90       	pop	r0
 10a:	1f 90       	pop	r1
 10c:	18 95       	reti

0000010e <_exit>:
 10e:	f8 94       	cli

00000110 <__stop_program>:
 110:	ff cf       	rjmp	.-2      	; 0x110 <__stop_program>
